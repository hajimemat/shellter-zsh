# ============================================================
# Zshの設定
# ============================================================

# 挙動
bindkey -e
## 補完
autoload -U compinit
compinit
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*:default' list-colors ${LS_COLORS}
## GLOB
setopt extended_glob

# 履歴
HISTFILE=~/.zsh_history      # ヒストリファイルを指定
HISTSIZE=10000               # ヒストリに保存するコマンド数
SAVEHIST=10000               # ヒストリファイルに保存するコマンド数
setopt hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt share_history         # コマンド履歴ファイルを共有する
setopt append_history        # 履歴を追加 (毎回 .zsh_history を作るのではなく)
setopt inc_append_history    # 履歴をインクリメンタルに追加
setopt hist_no_store         # historyコマンドは履歴に登録しない
setopt hist_reduce_blanks    # 余分な空白は詰めて記録

autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end 

# ディレクトリ移動
setopt auto_pushd
setopt pushd_ignore_dups

# カラフル化
autoload -Uz colors
colors

export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'
alias ls="ls --color"
alias la="ls --color -a"
alias ll="ls --color -l"


# プロンプトの設定
setopt prompt_subst

## 関数

### ブランチ名を色付きで表示させるメソッド
function rprompt-git-current-branch {
  local branch_name st branch_status

  if [ ! -e  ".git" ]; then
    # gitで管理されていないディレクトリは何も返さない
    return
  fi
  branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    # 全てcommitされてクリーンな状態
    branch_status="%F{green}"
    branch_status_mark=""
  elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
    # gitに管理されていないファイルがある状態
    branch_status="%F{red}"
    branch_status_mark="?"
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    # git addされていないファイルがある状態
    branch_status="%F{red}"
    branch_status_mark="+"
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    # git commitされていないファイルがある状態
    branch_status="%F{yellow}"
    branch_status_mark="!"
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    # コンフリクトが起こった状態
    echo "%F{red}!(no branch)"
    return
  else
    # 上記以外の状態の場合は青色で表示させる
    branch_status="%F{blue}"
    branch_status_mark=""
  fi
  # ブランチ名を色付きで表示する
  echo "${branch_status}(git:${branch_status_mark}$branch_name)"
}

## 実態
# hostnamecolor=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 30 + (total % 6)}')
namecolor=$(whoami | od | tr ' ' '\n' | awk '{total = total + $1}END{print 128 + (total % 20)}')
markcolor=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 80 + (total % 7)}')
hostnamecolor=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 196 + (total % 20)}')
CONSOLE_MARK='%F{'$markcolor'}%B%(!,#,$) >%b%f'
PROMPT='%F{$hostnamecolor}%B-- %m --%b%f %B%F{178}<(%f%b%F{'$namecolor'}%B%n%b%f%B%F{178})%f%b'
PROMPT=$PROMPT' '%F{068}%B%~%b%f' `rprompt-git-current-branch`%f
'$CONSOLE_MARK' '
#RPROMPT='`rprompt-git-current-branch`'
RPROMPT=

# プラグイン
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*'      recent-dirs-max 500
zstyle ':chpwd:*'      recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

## NVM
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 

## カラー
alias dispColors='for c in {000..255}; do echo -n "\e[38;5;${c}m $c" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'

## 
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS='--height 40% --reverse --border'
